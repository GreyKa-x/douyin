// Code generated by goctl. DO NOT EDIT.
package types

type FavoriteReq struct {
	Token
	VideoId    string `form:"video_id"`
	ActionType string `form:"action_type"`
}

type FavoriteResp struct {
	Status
}

type ListFavoriteReq struct {
	Token
	UserId string `form:"user_id"`
}

type ListFavoriteResp struct {
	Status
	VideoList []Video `json:"video_list,optional"`
}

type CommentReq struct {
	Token
	VideoId     string `form:"video_id"`
	ActionType  string `form:"action_type"`
	CommentText string `form:"comment_text"`
	Comment_id  string `form:"comment_id"`
}

type CommentResp struct {
	Status
	Comment Comment `json:"comment"`
}

type ListCommentReq struct {
	Token
	VideoId string `form:"video_id"`
}

type ListCommentResp struct {
	Status
	CommentList []Comment `json:"commentList,optional"`
}

type User struct {
	Id            int64  `json:"id"`
	Name          string `json:"name"`
	FollowCount   int64  `json:"follow_count"`
	FollowerCount int64  `json:"follower_count"`
	IsFollow      bool   `json:"is_follow"`
}

type Status struct {
	StatusCode int64  `json:"status_code"`
	StatusMsg  string `json:"status_msg,optional"`
}

type Token struct {
	Token string `form:"token"`
}

type Video struct {
	Id            int64  `json:"id"`
	Author        User   `json:"author"`
	PlayUrl       string `json:"play_url"`
	CoverUrl      string `json:"cover_url"`
	FavoriteCount int64  `json:"favorite_count"`
	CommentCount  int64  `json:"comment_count"`
	IsFavourite   bool   `json:"is_favourite"`
	Title         string `json:"title"`
}

type Comment struct {
	Id         int64  `json:"id"`
	User       User   `json:"user"`
	Cotent     string `json:"cotent"`
	CreateDate string `json:"create_date"`
}

type Message struct {
	Id         int64  `json:"id"`
	Content    string `json:"content"`
	CreateTime string `json:"create_time"`
}

type SendMessageReq struct {
	Token
	ToUserId   string `form:"to_user_id"`
	ActionType string `form:"action_type"`
	Content    string `form:"content"`
}

type SendMessageResp struct {
	Status
}

type ListMessageReq struct {
	Token
	ToUserId string `form:"to_user_id"`
}

type ListMessageResp struct {
	Status
	MessageList []Message `json:"message_list,optional"`
}

type FollowReq struct {
	Token
	ToUserId   string `form:"to_user_id"`
	ActionType string `form:"action_type"`
}

type FollowResp struct {
	Status
}

type ListFollowReq struct {
	Token
	UserId string `form:"user_id"`
}

type ListFollowResp struct {
	Status
	UserList []User `json:"user_list,optional"`
}

type ListFollowerReq struct {
	Token
	UserId string `form:"user_id"`
}

type ListFollowerResp struct {
	Status
	UserList []User `json:"user_list,optional"`
}

type ListFriendReq struct {
	Token
	UserId string `form:"user_id"`
}

type ListFriendResp struct {
	Status
	UserList []User `form:"user_list"`
}

type ListVideoReq struct {
	Token
	LatestTime string `form:"latest_time"`
}

type ListVideoResp struct {
	Status
	NextTime  int64   `json:"next_time,optional"`
	VideoList []Video `json:"video_list,optional"`
}

type UploadVideoReq struct {
	Token
	Data  []byte `form:"data"`
	Title string `form:"title"`
}

type UploadVideoResp struct {
	Status
}

type ListVideoByUserReq struct {
	Token
	UserId string `form:"user_id"`
}

type ListVideoByUserResp struct {
	Status
	VideoList []Video `json:"video_list,optional"`
}

type RegisterReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type RegisterResp struct {
	Status
	Token  string `json:"token"`
	UserId int64  `json:"user_id"`
}

type LoginReq struct {
	RegisterReq
}

type LoginResp struct {
	RegisterResp
}

type GetUserReq struct {
	Token
	UserId string `json:"user_id"`
}

type GetUserResp struct {
	Status
	User User `json:"user,optional"`
}
